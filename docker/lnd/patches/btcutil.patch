--- a/address.go
+++ b/address.go
@@ -137,12 +137,12 @@ func DecodeAddress(addr string, defaultNet *chaincfg.Params) (Address, error) {
 	// Bech32 encoded segwit addresses start with a human-readable part
 	// (hrp) followed by '1'. For Bitcoin mainnet the hrp is "bc", and for
 	// testnet it is "tb". If the address string has a prefix that matches
-	// one of the prefixes for the known networks, we try to decode it as
-	// a segwit address.
+	// the one defined in the defaultNet parameter, we try to decode it
+	// as a segwit address.
 	oneIndex := strings.LastIndexByte(addr, '1')
 	if oneIndex > 1 {
 		prefix := addr[:oneIndex+1]
-		if chaincfg.IsBech32SegwitPrefix(prefix) {
+		if strings.ToLower(prefix) == defaultNet.Bech32HRPSegwit+"1" {
 			witnessVer, witnessProg, err := decodeSegWitAddress(addr)
 			if err != nil {
 				return nil, err

--- a/address_test.go
+++ b/address_test.go
@@ -20,11 +20,13 @@ import (
 type CustomParamStruct struct {
 	PubKeyHashAddrID byte
 	ScriptHashAddrID byte
+	Bech32HRPSegwit  string
 }
 
 var CustomParams = CustomParamStruct{
-	PubKeyHashAddrID: 0x30, // starts with L
-	ScriptHashAddrID: 0x32, // starts with M
+	PubKeyHashAddrID: 0x30,  // starts with L
+	ScriptHashAddrID: 0x32,  // starts with M
+	Bech32HRPSegwit:  "ltc", // starts with ltc
 }
 
 // We use this function to be able to test functionality in DecodeAddress for
@@ -32,6 +34,7 @@ var CustomParams = CustomParamStruct{
 func applyCustomParams(params chaincfg.Params, customParams CustomParamStruct) chaincfg.Params {
 	params.PubKeyHashAddrID = customParams.PubKeyHashAddrID
 	params.ScriptHashAddrID = customParams.ScriptHashAddrID
+	params.Bech32HRPSegwit = customParams.Bech32HRPSegwit
 	return params
 }
 
@@ -628,6 +631,26 @@ func TestAddresses(t *testing.T) {
 			},
 			net: &chaincfg.TestNet3Params,
 		},
+		{
+			name:    "segwit litecoin mainnet p2wpkh v0",
+			addr:    "LTC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KGMN4N9",
+			encoded: "ltc1qw508d6qejxtdg4y5r3zarvary0c5xw7kgmn4n9",
+			valid:   true,
+			result: btcutil.TstAddressWitnessPubKeyHash(
+				0,
+				[20]byte{
+					0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54, 0x94,
+					0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6},
+				CustomParams.Bech32HRPSegwit,
+			),
+			f: func() (btcutil.Address, error) {
+				pkHash := []byte{
+					0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54, 0x94,
+					0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6}
+				return btcutil.NewAddressWitnessPubKeyHash(pkHash, &customParams)
+			},
+			net: &customParams,
+		},
 		// Unsupported witness versions (version 0 only supported at this point)
 		{
 			name:  "segwit mainnet witness v1",
